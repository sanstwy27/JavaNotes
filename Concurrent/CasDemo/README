# CAS compare and swap
In computer science, compare-and-swap (CAS) is an atomic instruction used in multithreading to achieve synchronization.
It compares the contents of a memory location with a given value and, only if they are the same,
modifies the contents of that memory location to a new given value. This is done as a single atomic operation.

# AtomicInteger getAndIncrement()
```
    public final int getAndIncrement() {
        return unsafe.getAndAddInt(this, valueOffset, 1);
    }
```
Unsafe getAndAddInt() parameters
- this：current object
- valueOffset：memory offset, memory address

# Unsafe
Uwe Schindler: Unsafe is an private and internal class of the Oracle JDK / OpenJDK platform. It’s used behind the scenes in a lot of public Java APIs to implement operations which are otherwise only available with native C or assembly code. It’s used for mainly the following tasks:
- Atomic compare-and-swap operations: Java bytecode does not have an instruction that can do this natively, so implementations from the package java.util.concurrent like AtomicInteger, LongAdder, or ConcurrentHashMap use Unsafe behind the scenes.
- Volatile array access: There is also no corresponding Java bytecode for this – you can only declare the whole array as volatile, but not its elements.
- Direct access to off-heap memory: Unsafe provides something like malloc() – as known from the C programming language. In addition, it provides methods to access allocated memory (which is outside of the main Java heap) by its absolute address. This is similar to pointers in C. This functionality is mainly used by direct buffers in the Java NIO API and to provide access to memory-mapped files.
- Some useful constants about the internal structure of object instances. These constants are usually required to call one of the above methods, but they are also useful to make runtime estimations on how much memory object instances require on Java’s heap.

# Unsafe getAndAddInt()
```
public final int getAndAddInt(Object var1, long var2, int var4) {
    int var5;
    do {
        var5 = this.getIntVolatile(var1, var2);
    } while (!this.compareAndSwapInt(var1, var2, var5, var4 + var5));
    return var5;
}
```
parameter list:
- var1 Object (AtomicInteger here)
- var2 memory address of var1
- var3
- var4 delta value
- var5 current value

# Why don't use  synchronized?
CAS concurrent performance is relatively better than synchronized method.

# CAS cons
- CPU resources
- one atomic variable per operation
- ABA problem
